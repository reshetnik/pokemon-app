{"version":3,"sources":["service.js","Item.js","Pagination.js","Main.js","PokemonItem.js","App.js","serviceWorker.js","index.js"],"names":["getData","a","offset","urlApi","data","items","total","fetch","then","responce","ok","Error","status","json","count","results","console","error","getDataPokemon","pokemonName","Item","item","id","className","to","name","Pagination","currentPage","event","totalPages","Math","ceil","rez","_","uniq","sort","b","filter","paginator","i","index","push","key","onClick","length","Main","useState","setItems","setTotal","setCurrentPage","useEffect","log","map","PokemonItem","useParams","undefined","setItem","src","alt","abilities","abil","ability","types","type","stats","stat","weight","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d31b13ce.chunk.js","sourcesContent":["export async function getData(offset = 0) {\n    const urlApi = `https://pokeapi.co/api/v2/pokemon/?limit=20&offset=${offset}`;\n\n    let data = {\n        items: [],\n        total: 0\n    };\n\n    try {\n        await fetch(urlApi)\n            .then((responce) => {\n                if (!responce.ok) {\n                    throw new Error(responce.status);\n                }\n                return responce.json();\n            })\n            .then(responce => {\n                data.total = responce.count;\n                data.items = responce.results\n            })\n    } catch (error) {\n        console.error(error)\n    }\n\n    return data;\n}\n\nexport async function getDataPokemon(pokemonName) {\n    const urlApi = `https://pokeapi.co/api/v2/pokemon/${pokemonName}`;\n\n    let data;\n\n    try {\n        await fetch(urlApi)\n            .then((responce) => {\n                if (!responce.ok) {\n                    throw new Error(responce.status);\n                }\n                data = responce.json();\n            })\n\n    } catch (error) {\n        console.error(error)\n    }\n\n    return data;\n}\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nexport default function Item({item, id}) {\n    return(\n        <div className=\"pokemon-items\" >\n            <Link to={`/${item.name}`} >\n                <div className=\"list-title\">\n                    {item.name}\n                </div>\n            </Link>\n        </div>\n    );\n}\n","import React from 'react'\nimport _ from 'underscore'\n\nexport default function Pagination({total, currentPage, event}) {\n\n    let totalPages = Math.ceil(total / 20);\n\n    let rez = _.uniq( [ 1, 2, ( totalPages - 1), totalPages, currentPage - 1, currentPage, currentPage + 1] )\n                .sort( (a,b) => a-b )\n                .filter( a => a > 0 && a <= totalPages  );\n    let paginator = [];\n    for( let i = 0; i < rez.length; i++ ){\n        let index = rez[i]\n        paginator.push(\n            <li key={i} onClick={() => event(index)} className={(index === currentPage) ? 'active' : ''}> {index}</li>\n        );\n        if( (rez[i] + 1) < rez[i+1] ) paginator.push(<li>...</li>);\n    }\n\n    if (total > 1) {\n\n        return(\n            <div className=\"pagination\">\n                <ul className=\"p-list\">\n                    { paginator }\n                </ul>\n            </div>\n        )\n    } else {\n        return(null)\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { getData} from './service.js';\nimport Item from './Item.js';\nimport Pag from './Pagination.js'\n\nexport default function Main() {\n\n    const [items, setItems] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n\n    let offset = 0\n\n    useEffect(() => {\n        (async function load() {\n             await getData(offset)\n            .then((responce) => {\n                setItems(responce.items);\n                setTotal(responce.total)\n            })\n        })();\n\n    }, [offset])\n\n    const event = async (item) => {\n        offset = item * 20;\n        console.log(item);\n        if (item === currentPage) return;\n        setCurrentPage(item);\n\n        await getData(offset)\n            .then((responce) => {\n                setItems(responce.items);\n            })\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>List of Pokemons</h1>\n            <div className=\"pokemon-list\">\n\n                { items.map((item, i) =>\n                    <Item item={item} key={i} id={i}/>\n                )}\n\n            </div>\n            <Pag total={total} currentPage={currentPage} event={event} />\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react'\nimport {useParams} from 'react-router-dom'\nimport {getDataPokemon} from './service.js'\n\nexport default function PokemonItem() {\n\n    let { items } = useParams();\n\n    const [item, setItem] = useState(undefined);\n\n\n    useEffect(() => {\n        (async function load() {\n             await getDataPokemon(items)\n            .then((responce) => {\n                setItem(responce)\n            })\n        })();\n\n    }, [items])\n\n    if (item !== undefined) {\n        return(\n            <div className=\"item\">\n                <div className=\"wrap\">\n                    <div className=\"img-wrap\">\n                        <img src={`https://pokeres.bastionbot.org/images/pokemon/${item.id}.png`} alt=\"\" />\n                    </div>\n                    <div className=\"description\">\n                        <div className=\"title\">\n                            {item.name}\n                        </div>\n                        <div className=\"stats\">\n                            <div><i>Abilites:</i> {item.abilities.map((abil, i) => (item.abilities.length === i+1) ? `${abil.ability.name}` : `${abil.ability.name}, `)}</div>\n                            <div><i>Types:</i> {item.types.map((abil, i) => (item.types.length === i+1) ? `${abil.type.name}` : `${abil.type.name}, `)} </div>\n                            <div><i>Stats:</i> {item.stats.map((abil, i) => (item.stats.length === i+1) ? `${abil.stat.name}` : `${abil.stat.name}, `)} </div>\n                            <div><i>Weight:</i> {item.weight}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <span>loading</span>\n        )\n    }\n\n\n}\n","import React from 'react';\nimport {\n    Switch,\n    Route\n  } from \"react-router-dom\";\n\nimport './App.css';\nimport Main from './Main.js';\nimport PokemonItem from './PokemonItem.js'\n\nfunction App() {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <Main />\n          </Route>\n          <Route path=\"/:items\">\n            <PokemonItem/>\n          </Route>\n        </Switch>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}